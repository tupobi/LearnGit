一般打开目录反手键可以调出git bash命令行面板

$ clear					-清屏

% mkdir					-创建目录

$ pwd					-用于显示当前目录

$ ls					-显示当前目录所有文件（不包含隐藏的文件，如.git看不到）

$ ls -a					-显示当前目录所有文件（包括隐藏文件）

$ git init				-把当前目录变成Git可以管理的仓库
Initialized empty Git repository in /Users/michael/learngit/.git/


$ git add <file>			-添加一个文件到仓库中，该文件必须在仓库里才行
//如：git add readme.txt


$ git commit -m "description...."	-把文件提交到仓库，可以多次add file，只提交一次就可以了。-m "...." 字符串内容是此次更新的描述
//git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后执行git commit就可以一次性把暂存区的所有修改提交到分支。


$ git status				-查看当前目录的仓库状态（已经修改未提交，无修改等等）

$ git diff				-未提交前的所有文本精确修改和文件模糊修改（注意：未提交前）（如果只修改没add就提交：no changes added to commit）
//PS：修改文件和添加文件一样需要add再提交！！


$ git log				-命令显示从最近到最远的提交日志

$ git reset --hard HEAD^		-上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
HEAD is now at ea34578 add distributed

$ git reset --hard 3628164		-去到版本id打头为3628164的版本，若版本id不知道，调用git reflog 查看每一次提交的版本号

$ git reflog				-用来记录你的每一次命令

$ git diff HEAD -- readme.txt 		-查看工作区和版本库里面最新版本的区别

$ git checkout -- readme.txt		-把readme.txt文件在工作区的修改全部撤销，这里有两种情况
/*一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。*/

$ git reset HEAD readme.txt		-用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区

$ git rm test.txt			-未add删除一个文件，撤销用$ git checkout -- test.txt